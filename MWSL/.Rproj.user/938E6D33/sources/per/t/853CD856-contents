

# PhenoMeNal (Phenome and Metabolome aNalysis) â€“ Large-scale Computing for Medical Metabolomics.
# PhenoMeNal is a comprehensive and standardised e-infrastructure that supports the data processing and analysis pipelines for molecular phenotype data generated by metabolomics applications.


devtools::install_github("AlinaPeluso/PhenoMeNal", subdir="MWSL")
library(MWSL)


#==================================================================
#------------------------------------------------------------------
### *** MESA Binned data ***
#------------------------------------------------------------------
#==================================================================

#--------------------------
### Import MESA Binned data
#--------------------------
data("MESA_binned")

# 4 outcomes
glucose <- MESA_binned[,1]; log_glucose <- MESA_binned[,2]; bmi <- MESA_binned[,7]; log_bmi <- MESA_binned[,8];
outcomes <- MESA_binned[,c(1:4)]

# 13 confounders: age,sex,height,ethnicityC,ethnicityH,ethnicityAA,smokingF,smokingC,ldl_chol,hdl_chol,sbp,bp_treatment,diabetes,lipids_treatment
MESA_binned$male <- ifelse(MESA_binned$sex<2,1,0)
confounders <- MESA_binned[,c(7,9:22,ncol(MESA_binned))]

# 655 features
features <- MESA_binned[,23:(ncol(MESA_binned)-1)]

#--------------------------
### Descriptive statistics
#--------------------------

# confounders
t(round(sapply(confounders, function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),3))

# clinical outcomes
t(round(sapply(outcomes, function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),2))

par(mfrow=c(2,4))
for (i in 1:ncol(outcomes)){hist(outcomes[,i],main=names(outcomes)[i],xlab=NULL)}
for (i in 1:ncol(outcomes)){boxplot(outcomes[,i],main=names(outcomes)[i],xlab=NULL)}




#--------------------------------------------
### Permutation-based MWSL and ENT estimation
#--------------------------------------------

# run fn FWERperm with glucose as outcome, the set of confounding variables, and the set of original features
rmesa_FWERperm_glucose_id <- FWERperm(outcome=MESA_binned[,"glucose"],
                             features=features,
                             confounders=MESA_binned[,c("age","male","height","ethnicityH","ethnicityAA","ethnicityCA","smokingF","smokingC","ldl_chol","hdl_chol","sbp","bp_treatment","diabetes","lipids_treatment")] ,
                             method='identity',
                             alpha=0.05,
                             n.permutation=10000)

# run fn FWERperm with glucose as outcome, the set of confounding variables, and the set of features approximated via multivariate Normal distribution
rmesa_FWERperm_glucose_mN <- FWERperm(outcome=MESA_binned[,"glucose"],
                             features=features,
                             confounders=MESA_binned[,c("age","male","height","ethnicityH","ethnicityAA","ethnicityCA","smokingF","smokingC","ldl_chol","hdl_chol","sbp","bp_treatment","diabetes","lipids_treatment")] ,
                             method='mN',
                             alpha=0.05,
                             n.permutation=10000)

# run fn FWERperm with glucose as outcome, the set of confounding variables, and the set of features approximated via multivariate log-Normal distribution
rmesa_FWERperm_glucose_mlogN <- FWERperm(outcome=MESA_binned[,"glucose"],
                                features=features,
                                confounders=MESA_binned[,c("age","male","height","ethnicityH","ethnicityAA","ethnicityCA","smokingF","smokingC","ldl_chol","hdl_chol","sbp","bp_treatment","diabetes","lipids_treatment")] ,
                                method='mlogN',
                                alpha=0.05,
                                n.permutation=10000)


### Results

# *** MWSL and ENT estimates from the permutation procedure
methods <- c('identity','mN','mlogN')
mat <- matrix(NA,3,8)
colnames(mat) <- c('MWSL','MWSL_CI.up','MWSL_CI.low','ENT','ENT_CI.up','ENT_CI.low','R.percent','t1err.percent')
rownames(mat) <- methods
mat[1,1:7] <- rmesa_FWERperm_glucose_id$res
mat[2,1:7] <- rmesa_FWERperm_glucose_mN$res
mat[3,1:7] <- rmesa_FWERperm_glucose_mlogN$res
mat[1,8] <- rmesa_FWERperm_glucose_id$t1err.percent
mat[2,8] <- rmesa_FWERperm_glucose_mN$t1err.percent
mat[3,8] <- rmesa_FWERperm_glucose_mlogN$t1err.percent

# *** Comparison MWSL estimates and Sidak and Bonferroni correction
alpha=0.05
MWSLmat <- matrix(NA,5,1); rownames(MWSLmat) <- c('MWSLperm_id','MWSLperm_mN','MWSLperm_mlogN','Sidak','Bonferroni'); colnames(MWSLmat) <- 'estimate'
MWSLmat[1,1] <- mat[1,1]; MWSLmat[2,1] <- mat[2,1]; MWSLmat[3,1] <- mat[3,1];
MWSLmat[4,1] <- 1-(1-alpha)^(1/ncol(features)); MWSLmat[5,1] <- alpha/ncol(features)
MWSLmat

# *** Plot of the distribution of the p-values under the null
hist(rmesa_glucose_mN$matPvals,main="Plot p-values under the null",breaks=50,xlab=NULL)

# *** Plot of minimum p-values when the features are simulated via multivariate Normal distribution
hist(rmesa_glucose_mN$q,main="Plot minimum p-values",breaks=150,xlim = c(0,0.0008),xlab=NULL)
op <- par(cex = 1.5)
abline(v=MWSLmat[1,1],col="red",lwd=5)
abline(v=MWSLmat[2,1],col="blue",lwd=5)
abline(v=MWSLmat[3,1],col="brown",lwd=5)
abline(v=MWSLmat[4,1],col="green",lwd=5)
abline(v=MWSLmat[5,1],col="orange",lwd=5)
legend("topright",c('perm_id','perm_mN','perm_mlogN','Sidak','Bonferroni'),fill=c("red","blue","brown","green","orange"))




#-------------------------------------------------------------------
### Closed form expression eigenvalues-based MWSL and ENT estimation
#-------------------------------------------------------------------

### Empirical correlation
rmesa_Meff_ecorr <- Meff(features=features,
                         n.permutation=100000,
                         method='ecorr',
                         #big.mat=TRUE,
                         alpha=0.05)
mat.rmesa_Meff_ecorr <- rbind(Meff_Nyholt=rmesa_Meff_ecorr$Meff_Nyholt,
                              Meff_Liji=rmesa_Meff_ecorr$Meff_Liji,
                              Meff_Gao=rmesa_Meff_ecorr$Meff_Gao,
                              Meff_Galwey=rmesa_Meff_ecorr$Meff_Galwey,
                              Meff_Bonferroni=rmesa_Meff_ecorr$Meff_Bonferroni,
                              Meff_Sidak=rmesa_Meff_ecorr$Meff_Sidak,
                              Meff_MWSL=rmesa_Meff_ecorr$Meff_MWSL);
colnames(mat.rmesa_Meff_ecorr) <- "ENT"
mat.rmesa_Meff_ecorr
rmesa_Meff_ecorr$res.Meff_MWSL



### Shrinkage correlation
rmesa_Meff_scorr <- Meff(features=features,
                         n.permutation=100000,
                         method='scorr',
                         #big.mat=TRUE,
                         alpha=0.05)
mat.rmesa_Meff_scorr <- rbind(Meff_Nyholt=rmesa_Meff_scorr$Meff_Nyholt,
                              Meff_Liji=rmesa_Meff_scorr$Meff_Liji,
                              Meff_Gao=rmesa_Meff_scorr$Meff_Gao,
                              Meff_Galwey=rmesa_Meff_scorr$Meff_Galwey,
                              Meff_Bonferroni=rmesa_Meff_scorr$Meff_Bonferroni,
                              Meff_Sidak=rmesa_Meff_scorr$Meff_Sidak,
                              Meff_MWSL=rmesa_Meff_scorr$Meff_MWSL);
colnames(mat.rmesa_Meff_scorr) <- "ENT"
mat.rmesa_Meff_scorr
rmesa_Meff_scorr$res.Meff_MWSL


#----------------------------------------------------------
### Identification of differentially regulated  metabolites
#----------------------------------------------------------

# rmesa_FWERperm_glucose_mN$res[1]
# rmesa_FWERperm_glucose_mlogN$res[1]
# rmesa_Meff_ecorr$Meff_MWS
# rmesa_Meff_scorr$Meff_MWSL

rmesa_DEtest <- DEtest(outcome=MESA_binned[,"log_glucose"],
                       features=features,
                       confounders=MESA_binned[,c("age","male","height","ethnicityH","ethnicityAA","ethnicityCA","smokingF","smokingC","ldl_chol","hdl_chol","sbp","bp_treatment","diabetes","lipids_treatment")] ,
                       MWSL=0.0001432,
                       alpha=0.05,
                       vennPlot=TRUE)





#==================================================================
#------------------------------------------------------------------
### *** Simulated data ***
#------------------------------------------------------------------
#==================================================================

#------------------------
### Import Simulated data
#------------------------

data("simX_low025") # very low correlation
data("simX_med4555") # medium correlation
data("simX_high95100") # very high correlation
SIMdat <- list(simX_low025,simX_med4555,simX_high95100)

#-------------------------------------------------------------------
### Simulate outcome
#-------------------------------------------------------------------


# simulated Y ~ Normal - Continuous
simY_cont <- rnorm(nrow(SIMdat[[1]]),0,1)

# simulated Y ~ Binomial - Discrete, binary
simY_binary = rbinom(nrow(SIMdat[[1]]),1,.6)

# simulated Y ~ Poisson - Discrete, count
simY_count <- rpois(nrow(SIMdat[[1]]),5)

# simulated Y ~ Negative Binomial - Discrete, count
simY_count <- rnegbin(nrow(SIMdat[[1]]),mu=10,theta=5)

# simulated Y ~ Survival
lifetime <- rexp(nrow(SIMdat[[1]]),rate=.2); censtime <- 5+5*runif(nrow(features));
time <- round(pmin(lifetime,censtime),0); status <- as.numeric(censtime>lifetime)
simY_surv <- as.data.frame(cbind(time,status))

# all
simY <- list(simY_cont,simY_binary,simY_count,simY_surv)



#--------------------------------------------
### Permutation-based MWSL and ENT estimation
#--------------------------------------------


methods <- c('identity','mN','mlogN')
mat <- matrix(NA,3,8);
colnames(mat) <- c('MWSL','MWSL_CI.up','MWSL_CI.low','ENT','ENT_CI.up','ENT_CI.low','R.percent','t1err.percent')
rownames(mat) <- methods
res.mesa_simY <- list(simY_cont=mat,simY_binary=mat,YdiscCountPO=mat,simY_count=mat,simY_surv=mat);
for (j in 1:length(methods)){
  for (i in 1:length(simY)){
    for (f in 1:length(SIMdat)){
    rmesa <- FWERperm(outcome=simY[[i]],features=SIMdat[[f]],confounders=confounders,n.permutation=10000,method=methods[j],verbose=F)
    res.mesa_simY[[i]][j,1:7] <- rmesa$res
    res.mesa_simY[[i]][j,8] <- rmesa$t1err.percent
    }
  }
}

#-------------------------------------------------------------------
### Closed form expression eigenvalues-based MWSL and ENT estimation
#-------------------------------------------------------------------


### Empirical correlation
for (i in 1:length(SIMdat)){
  rsim_Meff_ecorr <- Meff(features=SIMdat[[i]],
                          n.permutation=100000,
                          method='ecorr',
                          alpha=0.05)
  rsim_Meff_ecorr <- do.call(rbind,rsim_Meff_ecorr); colnames(rsim_Meff_ecorr) <- "ENT"
  print(rsim_Meff_ecorr)
}


### Shrinkage correlation
for (i in 1:length(SIMdat)){
  rsim_Meff_scorr <- Meff(features=SIMdat[[i]],
                          n.permutation=100000,
                          method='scorr',
                          alpha=0.05)
  rsim_Meff_scorr <- do.call(rbind,rsim_Meff_scorr); colnames(rsim_Meff_scorr) <- "ENT"
  print(rsim_Meff_scorr)
}


#----------------------------------------------------------
### Identification of differentially regulated  metabolites
#----------------------------------------------------------

# rmesa_FWERperm_glucose_mN$res[1]
# rmesa_FWERperm_glucose_mlogN$res[1]
# rmesa_Meff_ecorr$Meff_MWS
# rmesa_Meff_scorr$Meff_MWSL

for (i in 1:length(simY)){
  for (f in 1:length(SIMdat)){
  rsim_DEtest <- DEtest(outcome=simY[[i]],
                        features=SIMdat[[f]],
                        MWSL=0.0001432,
                        alpha=0.05,
                        vennPlot=TRUE)
  }
}


