# 13 confounders: age,sex,height,ethnicityC,ethnicityH,ethnicityAA,smokingF,smokingC,ldl_chol,hdl_chol,sbp,bp_treatment,diabetes,lipids_treatment
MESA_binned$male <- ifelse(MESA_binned$sex<2,1,0)
confounders <- MESA_binned[,c("age","male","height","ethnicityH","ethnicityAA","ethnicityCA","smokingF","smokingC","ldl_chol","hdl_chol","sbp","bp_treatment","diabetes","lipids_treatment")]
# 655 features
features <- MESA_binned[,23:(ncol(MESA_binned)-1)]
#--------------------------
### Descriptive statistics
#--------------------------
# confounders
t(round(sapply(MESA_binned[,c(7,9:22,ncol(MESA_binned))], function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),3))
# clinical outcomes
t(round(sapply(MESA_binned[,c(1:4)], function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),2))
par(mfrow=c(2,4))
for (i in 1:ncol(outcomes)){hist(outcomes[,i],main=names(outcomes)[i],xlab=NULL)}
for (i in 1:ncol(outcomes)){boxplot(outcomes[,i],main=names(outcomes)[i],xlab=NULL)}
# clinical outcomes
t(round(sapply(outcomes, function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),2))
t(round(sapply(features, function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),2))
descr_stats_features <- t(round(sapply(features, function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),2))
View(descr_stats_features)
range(descr_stats_features)
range(data.frame(descr_stats_features))
sapply(data.frame(descr_stats_features))
sapply(data.frame(descr_stats_features),function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),2)))
round(sapply(data.frame(descr_stats_features),function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),2))
#--------------------------
### Descriptive statistics
#--------------------------
# features
head(t(round(sapply(features, function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),2)),6)
tail(t(round(sapply(features, function(x) c(mean=mean(x),sd=sd(x),median=median(x),min=min(x),max=max(x))),2)),5)
rmesa_FWERperm
load("~/Desktop/mwsl_binned.RData")
View(rmesa_FWERperm_glucose_id)
View(rmesa_FWERperm_glucose_id)
rmesa_FWERperm_glucose_id
rmesa_FWERperm_glucose_mN
library(MWSL)
#==================================================================
#------------------------------------------------------------------
### *** MESA Binned data ***
#------------------------------------------------------------------
#==================================================================
#--------------------------
### Import MESA Binned data
#--------------------------
data("MESA_binned")
#### 4 outcomes
glucose <- MESA_binned[,1]; log_glucose <- MESA_binned[,2]; bmi <- MESA_binned[,7]; log_bmi <- MESA_binned[,8];
outcomes <- MESA_binned[,c(1:4)]
#### 13 confounders: age,sex,height,ethnicityC,ethnicityH,ethnicityAA,smokingF,smokingC,ldl_chol,hdl_chol,sbp,bp_treatment,diabetes,lipids_treatment
MESA_binned$male <- ifelse(MESA_binned$sex<2,1,0)
confounders <- MESA_binned[,c("age","male","height","ethnicityH","ethnicityAA","ethnicityCA","smokingF","smokingC","ldl_chol","hdl_chol","sbp","bp_treatment","diabetes","lipids_treatment")]
#### 655 features
features <- MESA_binned[,23:(ncol(MESA_binned)-1)]
methods <- c('identity','mN','mlogN')
mat <- matrix(NA,3,8)
colnames(mat) <- c('MWSL','MWSL_CI.up','MWSL_CI.low','ENT','ENT_CI.up','ENT_CI.low','R.percent','t1err.percent')
rownames(mat) <- methods
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat);
for (j in 1:length(methods)){
for (i in 1:ncol(outcomes)){
rmesa <- FWERperm(outcome=outcomes[,i],
features=features,
confounders=confounders,
n.permutation=100,
method=methods[j],
verbose=F)
rmesa_FWERperm[[i]][j,1:7] <- rmesa$res
rmesa_FWERperm[[i]][j,8] <- rmesa$t1err.percent
}
}
rmesa_FWERperm
methods <- c('identity','mN','mlogN')
mat <- matrix(NA,3,8)
colnames(mat) <- c('MWSL','MWSL_CI.up','MWSL_CI.low','ENT','ENT_CI.up','ENT_CI.low','R.percent','t1err.percent')
rownames(mat) <- methods
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat);
for (j in 1:length(methods)){
for (i in 1:ncol(outcomes)){
rmesa <- FWERperm(outcome=outcomes[,i],
features=features,
confounders=confounders,
n.permutation=100,
method=methods[j],
verbose=F)
rmesa_FWERperm[[i]][j,1:7] <- rmesa$res
rmesa_FWERperm[[i]][j,8] <- rmesa$t1err.percent
}
}
rmesa_FWERperm
### Empirical correlation
rmesa_Meff_ecorr <- Meff(features=features,
n.permutation=100000,
method='ecorr',
#big.mat=TRUE,
alpha=0.05)
mat.rmesa_Meff_ecorr <- rbind(Meff_Nyholt=rmesa_Meff_ecorr$Meff_Nyholt,
Meff_Liji=rmesa_Meff_ecorr$Meff_Liji,
Meff_Gao=rmesa_Meff_ecorr$Meff_Gao,
Meff_Galwey=rmesa_Meff_ecorr$Meff_Galwey,
Meff_Bonferroni=rmesa_Meff_ecorr$Meff_Bonferroni,
Meff_Sidak=rmesa_Meff_ecorr$Meff_Sidak,
Meff_MWSL=rmesa_Meff_ecorr$Meff_MWSL);
mat.rmesa_Meff_ecorr
### Empirical correlation
rmesa_Meff_ecorr <- Meff(features=features,
n.permutation=100000,
method='ecorr',
#big.mat=TRUE,
alpha=0.05)
mat.rmesa_Meff_ecorr <- rbind(Meff_Nyholt=rmesa_Meff_ecorr$Meff_Nyholt,
Meff_Liji=rmesa_Meff_ecorr$Meff_Liji,
Meff_Gao=rmesa_Meff_ecorr$Meff_Gao,
Meff_Galwey=rmesa_Meff_ecorr$Meff_Galwey,
Meff_Bonferroni=rmesa_Meff_ecorr$Meff_Bonferroni,
Meff_Sidak=rmesa_Meff_ecorr$Meff_Sidak,
Meff_MWSL=rmesa_Meff_ecorr$Meff_MWSL);
mat.rmesa_Meff_ecorr
rical correlation
rmesa_Meff_ecorr <- Meff(features=features,
n.permutation=100000,
method='scorr',
#big.mat=TRUE,
alpha=0.05)
mat.rmesa_Meff_ecorr <- rbind(Meff_Nyholt=rmesa_Meff_ecorr$Meff_Nyholt,
Meff_Liji=rmesa_Meff_ecorr$Meff_Liji,
Meff_Gao=rmesa_Meff_ecorr$Meff_Gao,
Meff_Galwey=rmesa_Meff_ecorr$Meff_Galwey,
Meff_Bonferroni=rmesa_Meff_ecorr$Meff_Bonferroni,
Meff_Sidak=rmesa_Meff_ecorr$Meff_Sidak,
Meff_MWSL=rmesa_Meff_ecorr$Meff_MWSL);
mat.rmesa_Meff_ecorr
rical correlation
rmesa_Meff_ecorr <- Meff(features=features,
n.permutation=100000,
method='scorr',
#big.mat=TRUE,
alpha=0.05)
mat.rmesa_Meff_ecorr <- rbind(Meff_Nyholt=rmesa_Meff_ecorr$Meff_Nyholt,
Meff_Liji=rmesa_Meff_ecorr$Meff_Liji,
Meff_Gao=rmesa_Meff_ecorr$Meff_Gao,
Meff_Galwey=rmesa_Meff_ecorr$Meff_Galwey,
Meff_Bonferroni=rmesa_Meff_ecorr$Meff_Bonferroni,
Meff_Sidak=rmesa_Meff_ecorr$Meff_Sidak,
Meff_MWSL=rmesa_Meff_ecorr$Meff_MWSL);
mat.rmesa_Meff_ecorr
rmesa_Meff_ecorr$res.Meff_MWSL
rmesa_DEtest <- list()
for (i in 1:ncol(outcomes)){
res_DEtest <- DEtest(outcome=outcomes[,i],
features=features[1:10,],
confounders=confounders,
MWSL=0.000145102,
alpha=0.05,
vennPlot=TRUE)
rmesa_DEtest[[i]]<- res_DEtest
}
rmesa_DEtest <- list()
for (i in 1:ncol(outcomes)){
res_DEtest <- DEtest(outcome=outcomes[,i],
features=features[,1:10],
confounders=confounders,
MWSL=0.000145102,
alpha=0.05,
vennPlot=TRUE)
rmesa_DEtest[[i]]<- res_DEtest
}
rmesa_DEtest
do.call(rbind, rmesa_DEtest$res.DE_count)
rmesa_DEtest <- rrmesa_DEtest_count  <- list()
for (i in 1:ncol(outcomes)){
res_DEtest <- DEtest(outcome=outcomes[,i],
features=features[,1:10],
confounders=confounders,
MWSL=0.000145102,
alpha=0.05,
vennPlot=TRUE)
rmesa_DEtest[[i]]<- res_DEtest
rrmesa_DEtest_count[[i]]<- res_DEtest$res.DE_count
}
rmesa_DEtest <- rrmesa_DEtest_count  <- list()
for (i in 1:ncol(outcomes)){
res_DEtest <- DEtest(outcome=outcomes[,i],
features=features[,1:10],
confounders=confounders,
MWSL=0.000145102,
alpha=0.05,
vennPlot=TRUE)
rmesa_DEtest[[i]]<- res_DEtest
rmesa_DEtest_count[[i]]<- res_DEtest$res.DE_count
}
rmesa_DEtest <- rmesa_DEtest_count  <- list()
for (i in 1:ncol(outcomes)){
res_DEtest <- DEtest(outcome=outcomes[,i],
features=features[,1:10],
confounders=confounders,
MWSL=0.000145102,
alpha=0.05,
vennPlot=TRUE)
rmesa_DEtest[[i]]<- res_DEtest
rmesa_DEtest_count[[i]]<- res_DEtest$res.DE_count
}
do.call(rbind, rmesa_DEtest_count)
rownames(res.mesa_DEtest_count) <- c('glucose','logGlucose','BMI','logBMI')
res.mesa_DEtest_count <- do.call(rbind, rmesa_DEtest_count)
rownames(res.mesa_DEtest_count) <- c('glucose','logGlucose','BMI','logBMI')
res.mesa_DEtest_count
rmesa_DEtest$res.DE_names$FWER.MWSL
View(rmesa_DEtest)
names(rmesa_DEtest) <- c('glucose','logGlucose','BMI','logBMI')
View(res_DEtest)
View(rmesa_DEtest)
rmesa_DEtest <- rmesa_DEtest_count  <- list()
names(rmesa_DEtest) <- c('glucose','logGlucose','BMI','logBMI')
for (i in 1:ncol(outcomes)){
res_DEtest <- DEtest(outcome=outcomes[,i],
features=features,
confounders=confounders,
MWSL=0.000145102,
alpha=0.05,
vennPlot=TRUE)
rmesa_DEtest[[i]]<- res_DEtest
rmesa_DEtest_count[[i]]<- res_DEtest$res.DE_count
}
rmesa_DEtest[["glucose"]][["res.DE_names"]][["FWER.MWSL"]]
res.mesa_DEtest_count <- do.call(rbind, rmesa_DEtest_count)
rownames(res.mesa_DEtest_count) <- c('glucose','logGlucose','BMI','logBMI')
res.mesa_DEtest_count
vplot <- rmesa_DEtest[[1]]$Venn_plot
vplot <- rmesa_DEtest[[1]]$Venn_plot
vplot <- rmesa_DEtest[[4]]$Venn_plot
rmesa_DEtest[[4]]$Venn_plot
View(rmesa_DEtest)
par(mfrow=c(2,4))
rmesa_DEtest <- rmesa_DEtest_count  <- list()
names(rmesa_DEtest) <- c('glucose','logGlucose','BMI','logBMI')
for (i in 1:ncol(outcomes)){
res_DEtest <- DEtest(outcome=outcomes[,i],
features=features,
confounders=confounders,
MWSL=0.000145102,
alpha=0.05,
vennPlot=TRUE)
rmesa_DEtest[[i]]<- res_DEtest
rmesa_DEtest_count[[i]]<- res_DEtest$res.DE_count
}
par(mfrow=c(2,2))
rmesa_DEtest <- rmesa_DEtest_count  <- list()
names(rmesa_DEtest) <- c('glucose','logGlucose','BMI','logBMI')
for (i in 1:ncol(outcomes)){
res_DEtest <- DEtest(outcome=outcomes[,i],
features=features,
confounders=confounders,
MWSL=0.000145102,
alpha=0.05,
vennPlot=TRUE)
rmesa_DEtest[[i]]<- res_DEtest
rmesa_DEtest_count[[i]]<- res_DEtest$res.DE_count
}
res.mesa_DEtest_count <- do.call(rbind, rmesa_DEtest_count)
rownames(res.mesa_DEtest_count) <- c('glucose','logGlucose','BMI','logBMI')
res.mesa_DEtest_count
rmesa_DEtest[["glucose"]][["res.DE_names"]][["FWER.MWSL"]]
View(rmesa_DEtest)
names(rmesa_DEtest) <- names(rmesa_DEtest_count) <- c('glucose','logGlucose','BMI','logBMI')
View(rmesa_DEtest)
rmesa_DEtest[["glucose"]][["res.DE_names"]][["FWER.MWSL"]]
load("~/Desktop/mwsl_binned.RData")
View(rmesa_FWERperm_glucose_mN)
# plot of p-values when the features are simulated via multivariate Normal distribution
hist(rmesa_glucose_mN$matPvals,main="Plot p-values under the null",breaks=50,xlab=NULL)
# plot of p-values when the features are simulated via multivariate Normal distribution
hist(rmesa_FWERperm_glucose_mN$matPvals,main="Plot p-values under the null",breaks=50,xlab=NULL)
# plot of minimum p-values when the features are simulated via multivariate Normal distribution
hist(rmesa_glucose_mN$q,main="Plot minimum p-values",breaks=150,xlim = c(0,0.035),xlab=NULL)
# plot of p-values when the features are simulated via multivariate Normal distribution
hist(rmesa_FWERperm_glucose_mN$matPvals,main="Plot p-values under the null",breaks=50,xlab=NULL)
# plot of minimum p-values when the features are simulated via multivariate Normal distribution
hist(rmesa_FWERperm_glucose_mN$q,main="Plot minimum p-values",breaks=150,xlim = c(0,0.035),xlab=NULL)
op <- par(cex = 1.5)
abline(v=MWSLmat[1,1],col="red",lwd=5)
# plot of minimum p-values when the features are simulated via multivariate Normal distribution
hist(rmesa_FWERperm_glucose_mN$q,main="Plot minimum p-values",breaks=150,xlab=NULL) # ,xlim = c(0,0.035)
op <- par(cex = 1.5)
abline(v=MWSLmat[1,1],col="red",lwd=5)
methods <- c('identity','mN','mlogN')
mat <- matrix(NA,3,8)
colnames(mat) <- c('MWSL','MWSL_CI.up','MWSL_CI.low','ENT','ENT_CI.up','ENT_CI.low','R.percent','t1err.percent')
rownames(mat) <- methods
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
allresmesa <- list
for (j in 1:length(methods)){
for (i in 1:ncol(outcomes)){
rmesa <- FWERperm(outcome=outcomes[,i],
features=features,
confounders=confounders,
n.permutation=100,
method=methods[j],
verbose=F)
allresmesa[[i]] <- mesa
rmesa_FWERperm[[i]][j,1:7] <- rmesa$res
rmesa_FWERperm[[i]][j,8] <- rmesa$t1err.percent
}
}
methods <- c('identity','mN','mlogN')
mat <- matrix(NA,3,8)
colnames(mat) <- c('MWSL','MWSL_CI.up','MWSL_CI.low','ENT','ENT_CI.up','ENT_CI.low','R.percent','t1err.percent')
rownames(mat) <- methods
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
allresmesa <- list
for (j in 1:length(methods)){
for (i in 1:ncol(outcomes)){
rmesa <- FWERperm(outcome=outcomes[,i],
features=features,
confounders=confounders,
n.permutation=100,
method=methods[j],
verbose=F)
allresmesa[[i]] <- rmesa
rmesa_FWERperm[[i]][j,1:7] <- rmesa$res
rmesa_FWERperm[[i]][j,8] <- rmesa$t1err.percent
}
}
rmesa
l <- expand.grid(methods, outcomes)
l
expand.grid(methods, outcomes)
methods
outcomes
names(outcomes)
expand.grid(methods, names(outcomes))
rmesa_FWERperm
rmesa
mat <- matrix(NA,3,8)
colnames(mat) <- c('MWSL','MWSL_CI.up','MWSL_CI.low','ENT','ENT_CI.up','ENT_CI.low','R.percent','t1err.percent')
rownames(mat) <- methods
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
rmesa_pval <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
rmesa_minPvals <- rmesa_matPvals <- list
for (j in 1:length(methods)){
for (i in 1:ncol(outcomes)){
rmesa <- FWERperm(outcome=outcomes[,i],
features=features,
confounders=confounders,
n.permutation=10,
method=methods[j],
verbose=F)
rmesa_matPvals[[i]][[j]] <- rmesa$matPvals
rmesa_minPvals[[i]][[j]] <- rmesa$q
rmesa_FWERperm[[i]][j,1:7] <- rmesa$res
rmesa_FWERperm[[i]][j,8] <- rmesa$t1err.percent
}
}
methods <- c('identity','mN','mlogN')
mat <- matrix(NA,3,8)
colnames(mat) <- c('MWSL','MWSL_CI.up','MWSL_CI.low','ENT','ENT_CI.up','ENT_CI.low','R.percent','t1err.percent')
rownames(mat) <- methods
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
rmesa_pval <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
rmesa_minPvals <- rmesa_matPvals <- list()
for (j in 1:length(methods)){
for (i in 1:ncol(outcomes)){
rmesa <- FWERperm(outcome=outcomes[,i],
features=features,
confounders=confounders,
n.permutation=10,
method=methods[j],
verbose=F)
rmesa_matPvals[[i]][[j]] <- rmesa$matPvals
rmesa_minPvals[[i]][[j]] <- rmesa$q
rmesa_FWERperm[[i]][j,1:7] <- rmesa$res
rmesa_FWERperm[[i]][j,8] <- rmesa$t1err.percent
}
}
methods <- c('identity','mN','mlogN')
mat <- matrix(NA,3,8)
colnames(mat) <- c('MWSL','MWSL_CI.up','MWSL_CI.low','ENT','ENT_CI.up','ENT_CI.low','R.percent','t1err.percent')
rownames(mat) <- methods
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
rmesa_pval <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
allres_mesa <- list()
for (j in 1:length(methods)){
for (i in 1:ncol(outcomes)){
rmesa <- FWERperm(outcome=outcomes[,i],
features=features,
confounders=confounders,
n.permutation=10,
method=methods[j],
verbose=F)
allres_mesa[[3*(i-1)+j]] <- rmesa$matPvals
rmesa_FWERperm[[i]][j,1:7] <- rmesa$res
rmesa_FWERperm[[i]][j,8] <- rmesa$t1err.percent
}
}
rmesa_pval <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
rmesa_FWERperm <- list(glucose=mat,log_glucose=mat,bmi=mat,log_bmi=mat)
allres_mesa <- list()
for (j in 1:length(methods)){
for (i in 1:ncol(outcomes)){
rmesa <- FWERperm(outcome=outcomes[,i],
features=features,
confounders=confounders,
n.permutation=60,
method=methods[j],
verbose=F)
allres_mesa[[3*(i-1)+j]] <- rmesa
rmesa_FWERperm[[i]][j,1:7] <- rmesa$res
rmesa_FWERperm[[i]][j,8] <- rmesa$t1err.percent
}
}
View(allres_mesa)
expand.grid(names(outcomes), methods)
rmesa_FWERperm
allres_mesa
View(rmesa_FWERperm)
rmesa_FWERperm[["glucose"]]
View(allres_mesa)
rmesa_FWERperm[["log_glucose"]]
rmesa_FWERperm[["bmi"]]
rmesa_FWERperm[["log_bmi"]]
expand.grid(names(outcomes), methods)
names(allres_mesa) <- expand.grid(methods, names(outcomes))
names(allres_mesa)
expand.grid(methods, names(outcomes))
df.names <- expand.grid(methods, names(outcomes))
paste(df.names$Var1, df.names$Var2,sep=.)
paste(df.names$Var1, df.names$Var2,sep='.')
names(allres_mesa) <- paste(df.names$Var1, df.names$Var2,sep='.')
View(allres_mesa)
rmesa_FWERperm
# plot of p-values when the features are simulated via multivariate Normal distribution
hist(allres_mesa[["mN.glucose"]][["matPvals"]],main="Plot p-values under the null",breaks=50,xlab=NULL)
# plot of minimum p-values when the features are simulated via multivariate Normal distribution
hist(allres_mesa[["mN.glucose"]][["q"]],main="Plot minimum p-values",breaks=150,xlab=NULL) # ,xlim = c(0,0.035)
rmesa_FWERperm$glucose
rmesa_FWERperm$glucose[2,1]
hist(allres_mesa[["mN.glucose"]][["q"]],main="Plot minimum p-values",breaks=150,xlab=NULL) # ,xlim = c(0,0.035)
op <- par(cex = 1.5)
abline(v=rmesa_FWERperm$glucose[1,1],col="red",lwd=5)
abline(v=rmesa_FWERperm$glucose[2,1],col="blue",lwd=5)
abline(v=rmesa_FWERperm$glucose[3,1],col="brown",lwd=5)
abline(v=1-(1-alpha)^(1/ncol(features)),col="green",lwd=5)
abline(v=alpha/ncol(features),col="orange",lwd=5)
legend("topright",c('perm_id','perm_mN','perm_mlogN','Sidak','Bonferroni'),fill=c("red","blue","brown","green","orange"))
op <- par(cex = 1.5); alpha=0.05
abline(v=rmesa_FWERperm$glucose[1,1],col="red",lwd=5)
abline(v=rmesa_FWERperm$glucose[2,1],col="blue",lwd=5)
abline(v=rmesa_FWERperm$glucose[3,1],col="brown",lwd=5)
abline(v=1-(1-alpha)^(1/ncol(features)),col="green",lwd=5)
abline(v=alpha/ncol(features),col="orange",lwd=5)
legend("topright",c('perm_id','perm_mN','perm_mlogN','Sidak','Bonferroni'),fill=c("red","blue","brown","green","orange"))
load("~/Desktop/mwsl_binned.RData")
View(rmesa_FWERperm_glucose_mlogN)
hist(rmesa_FWERperm_glucose_mlogN[["q"]],main="Plot minimum p-values",breaks=150,xlab=NULL) # ,xlim = c(0,0.035)
op <- par(cex = 1.5); alpha=0.05
abline(v=rmesa_FWERperm$glucose[1,1],col="red",lwd=5)
abline(v=rmesa_FWERperm$glucose[2,1],col="blue",lwd=5)
hist(rmesa_FWERperm_glucose_mlogN[["q"]],main="Plot minimum p-values",breaks=150,xlab=NULL) # ,xlim = c(0,0.035)
op <- par(cex = 1.5); alpha=0.05
abline(v=0.0000685,col="red",lwd=5)
abline(v=0.0001430,col="blue",lwd=5)
abline(v=0.0001376,col="brown",lwd=5)
abline(v=1-(1-alpha)^(1/ncol(features)),col="green",lwd=5)
abline(v=alpha/ncol(features),col="orange",lwd=5)
legend("topright",c('perm_id','perm_mN','perm_mlogN','Sidak','Bonferroni'),fill=c("red","blue","brown","green","orange"))
hist(rmesa_FWERperm_glucose_mlogN[["q"]],main="Plot minimum p-values",breaks=150,xlab=NULL) # ,xlim = c(0,0.035)
hist(rmesa_FWERperm_glucose_mlogN[["q"]],main="Plot minimum p-values",breaks=150,xlab=NULL,xlim = c(0,0.035)
op <- par(cex = 1.5); alpha=0.05
abline(v=0.0000685,col="red",lwd=5)
abline(v=0.0001430,col="blue",lwd=5)
abline(v=0.0001376,col="brown",lwd=5)
abline(v=1-(1-alpha)^(1/ncol(features)),col="green",lwd=5)
abline(v=alpha/ncol(features),col="orange",lwd=5)
legend("topright",c('perm_id','perm_mN','perm_mlogN','Sidak','Bonferroni'),fill=c("red","blue","brown","green","orange"))
hist(rmesa_FWERperm_glucose_mlogN[["q"]],main="Plot minimum p-values",breaks=150,xlab=NULL,xlim = c(0,0.0035)
abline(v=0.0000685,col="red",lwd=5)
abline(v=0.0001430,col="blue",lwd=5)
abline(v=0.0001376,col="brown",lwd=5)
abline(v=1-(1-alpha)^(1/ncol(features)),col="green",lwd=5)
hist(rmesa_FWERperm_glucose_mlogN[["q"]],main="Plot minimum p-values",breaks=150,xlab=NULL,xlim = c(0,0.0035))
op <- par(cex = 1.5); alpha=0.05
abline(v=0.0000685,col="red",lwd=5)
abline(v=0.0001430,col="blue",lwd=5)
abline(v=0.0001376,col="brown",lwd=5)
abline(v=1-(1-alpha)^(1/ncol(features)),col="green",lwd=5)
abline(v=alpha/ncol(features),col="orange",lwd=5)
legend("topright",c('perm_id','perm_mN','perm_mlogN','Sidak','Bonferroni'),fill=c("red","blue","brown","green","orange"))
1-(1-alpha)^(1/ncol(features))
options("scipen"=100, "digits"=4)
1-(1-alpha)^(1/ncol(features))
lpha/ncol(features)
alpha/ncol(features)
hist(rmesa_FWERperm_glucose_mlogN[["q"]],main="Plot minimum p-values",breaks=150,xlab=NULL,xlim = c(0,0.0005))
op <- par(cex = 1.5); alpha=0.05
abline(v=0.0000685,col="red",lwd=5)
abline(v=0.0001430,col="blue",lwd=5)
abline(v=0.0001376,col="brown",lwd=5)
abline(v=1-(1-alpha)^(1/ncol(features)),col="green",lwd=5)
abline(v=alpha/ncol(features),col="orange",lwd=5)
legend("topright",c('perm_id','perm_mN','perm_mlogN','Sidak','Bonferroni'),fill=c("red","blue","brown","green","orange"))
hist(rmesa_FWERperm_glucose_mlogN[["q"]],main="Plot minimum p-values",breaks=150,xlab=NULL)
op <- par(cex = 1.5); alpha=0.05
abline(v=0.0000685,col="red",lwd=5)
abline(v=0.0001430,col="blue",lwd=5)
abline(v=0.0001376,col="brown",lwd=5)
abline(v=1-(1-alpha)^(1/ncol(features)),col="green",lwd=5)
abline(v=alpha/ncol(features),col="orange",lwd=5)
library(MWSL)
